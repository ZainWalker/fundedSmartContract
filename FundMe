// SPDX-License-Identifier: MIT

pragma solidity ^0.8.18;

import {PriceConverter} from "./PriceConverter.sol";

error NotOwner();

contract FundMe {

    using PriceConverter for uint256;

    uint256 public constant MINIMUM_USD = 5e18;

    address[] public funders;
    mapping(address funder => uint256 amountFunded) public addressToAmountFunded;

    address public immutable i_owner;

    constructor() { //constructor to replace function callMe() public
        i_owner = msg.sender;
    }

    function fund() public payable {
        require(msg.value.getConversionRate() >= MINIMUM_USD, "Did not send enough ETH."); // 1e18 = 1 ETH = 1 * 10 ** 18
        funders.push(msg.sender);
        addressToAmountFunded[msg.sender] += msg.value;
    }

    // A revert undoes actions and sends remainder ETH back

    function withdraw() public onlyOwner {

        // Starting index, ending index, step amount
        for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {
            address funder = funders[funderIndex];
            addressToAmountFunded[funder] = 0;
        }

        funders = new address[](0);

        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}("");
        require(callSuccess, "Call failed");
    }

    modifier onlyOwner() {
        //require(msg.sender == i_owner, "Sender is now ownwer!");
        if(msg.sender != i_owner) { revert NotOwner(); }
        _;
    }
    
    receive() external payable {
        fund();
    }

    fallback() external payable {
        fund();
    }
}

    // Sending Ether

    // transfer
    // payable(msg.sender).transer(address(The Whole Contract).balance);
    // 2300 gas, throws error

    // send
    // bool sendSuccess = payable(msg.sender).send(address(The Whole Contract).balance);
    // require(sendSuccess, "Send failed");
    // 2300 gas, returns boolean, success or fail

    // call
    // (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}("")
    // require(callSuccess, "Call failed");
    // forward all gas or set gas, returns bool

    // recieve();
    // fallback();
